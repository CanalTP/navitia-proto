import "type.proto";
package pbnavitia;

message CalendarsRequest {
    optional string start_date      = 1;
    optional string end_date        = 2;
    optional int32 depth            = 3;
    optional int32 start_page       = 4;
    optional int32 count            = 5;
    optional string filter          = 6;
    repeated string forbidden_uris  = 7;
}

message TrafficReportsRequest {
    optional uint64 application_period_begin    = 8;
    optional uint64 application_period_end      = 9;
    optional uint64 _current_datetime           = 10;
    optional int32 depth                        = 3;
    optional int32 start_page                   = 4;
    optional int32 count                        = 5;
    optional string filter                      = 6;
    repeated string forbidden_uris              = 7;
}

message PlacesRequest {
    required string q           = 1;
    repeated NavitiaType types  = 2;
    required int32 depth        = 3;
    required int32 count        = 4;
    repeated string admin_uris  = 5;
    optional int32 search_type  = 6;
}

message NextStopTimeRequest {
    required string departure_filter    = 1;
    required string arrival_filter      = 2;
    optional uint64 from_datetime       = 3;
    required int32 duration             = 4;
    required int32 depth                = 5;
    required int32 nb_stoptimes         = 7;
    optional int32 interface_version    = 8;
    required int32 start_page           = 9;
    required int32 count                = 10;
    optional int32 max_date_times       = 11;
    repeated string forbidden_uri       = 12;
    optional string calendar            = 13;
    optional uint64 until_datetime      = 15;
    optional uint64 _current_datetime   = 16;
    optional RTLevel realtime_level     = 17;
}

message StreetNetworkParams {
    optional string origin_mode                 = 1;
    optional string destination_mode            = 2;
    optional double walking_speed               = 3;
    optional double bike_speed                  = 5;
    optional double car_speed                   = 7;
    optional double bss_speed                   = 9;
    optional string origin_filter               = 11;
    optional string destination_filter          = 12;

    optional int32 max_walking_duration_to_pt   = 13;
    optional int32 max_bike_duration_to_pt      = 14;
    optional int32 max_bss_duration_to_pt       = 15;
    optional int32 max_car_duration_to_pt       = 16;
    optional bool enable_direct_path            = 17 [default=true];
}

message JourneysRequest {
    repeated LocationContext origin                     = 1;
    repeated LocationContext destination                = 2;
    repeated uint64 datetimes                           = 3;
    required bool clockwise                             = 4;
    repeated string forbidden_uris                      = 5;
    required int32 max_duration                         = 6;
    required int32 max_transfers                        = 7;
    optional StreetNetworkParams streetnetwork_params   = 8;
    optional bool wheelchair                            = 9      [default=false];
    optional bool details                               = 13; //to be removed
    optional RTLevel realtime_level                     = 14;
    optional int32 max_extra_second_pass                = 15     [default=0];
    optional int32 walking_transfer_penalty             = 16     [default=120];
}

message PlacesNearbyRequest {
    required string uri         = 1;
    required double distance    = 2;
    repeated NavitiaType types  = 3;
    required int32 depth        = 4;
    required int32 count        = 5;
    required int32 start_page   = 6;
    optional string filter      = 7;
}

message PlaceUriRequest {
    required string uri = 1;
}

message PlaceCodeRequest {
    enum Type {
        StopArea = 0;
        Network = 1;
        Company = 2;
        Line = 3;
        Route = 4;
        VehicleJourney = 5;
        StopPoint = 6;
        Calendar = 7;
    }
    required Type type = 1;
    required string type_code = 2;
    required string code = 3;
}

message PTRefRequest {
    required NavitiaType requested_type = 1;
    required string filter              = 2;
    required int32 depth                = 3;
    required int32 start_page           = 4;
    required int32 count                = 5;
    optional OdtLevel odt_level         = 8;
    repeated string forbidden_uri       = 6;
    optional uint64 datetime            = 9;

    optional uint64 since_datetime      = 10;
    optional uint64 until_datetime      = 11;
}

message Request {
    required API requested_api                           = 1;

    optional PlacesRequest places                        = 2;
    optional NextStopTimeRequest next_stop_times         = 3;
    optional PlacesNearbyRequest places_nearby           = 4;
    optional JourneysRequest journeys                    = 5;
    optional PTRefRequest ptref                          = 6;
    optional PlaceUriRequest place_uri                   = 7;
    optional TrafficReportsRequest traffic_reports       = 13;
    optional CalendarsRequest calendars                  = 9;
    optional PtobjectRequest pt_objects                  = 10;
    optional PlaceCodeRequest place_code                 = 11;
    optional NearestStopPointsRequest nearest_stop_points = 14;

    optional string request_id                           = 12;
}

message NearestStopPointsRequest {
    optional string place = 1;

    optional string mode  = 2;
    optional double walking_speed = 3;
    optional double bike_speed = 4;
    optional double car_speed = 5;
    optional double bss_speed = 6;
    optional string filter = 7;
    optional int32 max_duration = 8;
    optional bool reverse = 9;
}


message PtobjectRequest {
    required string q           = 1;
    repeated NavitiaType types  = 2;
    required int32 depth        = 3;
    required int32 count        = 4;
    repeated string admin_uris  = 5;
    optional int32 search_type  = 6;
}

